import React, { useEffect, useState, useRef } from 'react';
import styled from 'styled-components';
import { FaRegComment, FaTimes } from 'react-icons/fa';
import { fetchChatMessages } from '../../api/chatApi';
import { webSocketService } from '../../utils/webSocket';

interface Message {
  senderId: string;
  content: string;
  timestamp: string | null;
  type?: string;
}

interface ChatRoomProps {
  chatRoomId: number;
  isAdmin?: boolean; // Í¥ÄÎ¶¨Ïûê Ïó¨Î∂Ä
  isOpen: boolean;
  onClose: () => void;
}

const ChatRoom: React.FC<ChatRoomProps> = ({
  chatRoomId,
  isAdmin = false,
  isOpen,
  onClose,
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const chatBoxRef = useRef<HTMLDivElement>(null);
  const currentUserId = 'user-00001'; // Mock Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê ID

  useEffect(() => {
    if (!isOpen) return;

    // Ï±ÑÌåÖÎ∞© Ï¥àÍ∏∞ Î©îÏãúÏßÄ Î∞è Ï±ÑÌåÖ Î©îÏãúÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchMessages = async () => {
      const fetchedMessages = await fetchChatMessages(chatRoomId);

      // ÏûÖÏû• Î©îÏãúÏßÄ Ï∂îÍ∞Ä
      const joinMessage: Message = {
        senderId: 'system',
        content: `Ïú§ÏÑ±ÎãòÏù¥ ÏûÖÏû•ÌïòÏÖ®ÏäµÎãàÎã§.`,
        timestamp: null, // timestamp ÌëúÏãúÌïòÏßÄ ÏïäÏùå
      };

      // Í∑∏Î£π Ï±ÑÌåÖ ÏïàÎÇ¥ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
      const groupChatNotice: Message = {
        senderId: 'system',
        content: `
ÏïàÎÇ¥ÏÇ¨Ìï≠: ÌôòÎ∂à Î∞è Ïù¥ÌÉà Í¥ÄÎ†® Ï†ïÏ±Ö
  1. ÌôòÎ∂à Î∞è ÏàòÎ†π ÏãúÍ∞Ñ/ÏúÑÏπò Ï°∞Ïú®
    - Í≥µÍµ¨ ÏßÑÌñâ Ï§ë(ÏµúÏ¢Ö ÏäπÏù∏ Ïù¥ÌõÑ)Ïù∏ Ï±ÑÌåÖÎ∞©ÏóêÏÑú
    ÏàòÎ†π ÏúÑÏπò Î∞è ÏãúÍ∞ÑÏùÑ Ï°∞Ïú®Ìï©ÎãàÎã§.
    - Ïù¥ÌÉàÏûêÍ∞Ä Î∞úÏÉùÌïòÍ±∞ÎÇò ÌôòÎ∂à ÏöîÏ≤≠Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞,
      Ïù¥ÌÉàÏûêÎäî Ï±ÑÌåÖÎ∞©ÏóêÏÑú ÌôòÎ∂à ÏùòÏÇ¨Î•º Î™ÖÌôïÌûà
      ÌëúÏãúÌï¥Ïïº ÌïòÎ©∞, Î™®Îì† Ï∞∏Ïó¨ Ïù∏ÏõêÏù¥ ÎèôÏùòÌïú
      Í≤ΩÏö∞Ïóê ÌïúÌï¥ ÌôòÎ∂àÏù¥ ÏßÑÌñâÎê©ÎãàÎã§.
  2. ÌôòÎ∂à Î∞è ÎπÑÏö© Î∂ÄÎã¥
    - ÌôòÎ∂à ÏßÑÌñâ Ïãú, Ï†ÑÏ≤¥ ÌôòÎ∂à Ï≤òÎ¶¨ Î∞è Ìï¥Îãπ Ïù∏ÏõêÏóê
      ÎåÄÌïú Ïã†Í≥† Ï†ëÏàòÍ∞Ä Ïù¥Î£®Ïñ¥ÏßÄÎ©∞, Ïù¥Î°ú Ïù∏Ìï¥
      Î∞úÏÉùÌïòÎäî Î™®Îì† ÎπÑÏö©(Í≥µÍµ¨ Î¨ºÌíà Î∞òÏÜ° Îì±)ÏùÄ
      Ïù¥ÌÉàÏûê Î≥∏Ïù∏Ïù¥ Ï†ÑÏï° Î∂ÄÎã¥Ìï©ÎãàÎã§.
  3. Ïù¥ÌÉàÏûêÏóê ÎåÄÌïú ÌéòÎÑêÌã∞ Ï†úÎèÑ
    - Ïù¥ÌÉà ÌñâÏúÑÍ∞Ä Î∞òÎ≥µÎê† Í≤ΩÏö∞, ÏïÑÎûòÏôÄ Í∞ôÏùÄ
      Í≤ΩÍ≥† ÏãúÏä§ÌÖúÏù¥ Ï†ÅÏö©Îê©ÎãàÎã§.
      - 1Ìöå Í≤ΩÍ≥†: Í≥ÑÏ†ï ÏùºÏ£ºÏùº Ï†ïÏßÄ
      - 3Ìöå Í≤ΩÍ≥†: Í≥ÑÏ†ï Ìïú Îã¨ Ï†ïÏßÄ
      - 5Ìöå Í≤ΩÍ≥†: Í≥ÑÏ†ï ÏòÅÍµ¨ Ï†ïÏßÄ

  üí° Ï£ºÏùò: Î≥∏ ÏïàÎÇ¥ÏÇ¨Ìï≠ÏùÑ ÏàôÏßÄÌïòÏßÄ ÏïäÏïÑ Î∞úÏÉùÌïòÎäî
              Î∂àÏù¥ÏùµÏùÄ Î≥∏Ïù∏ÏóêÍ≤å Ï±ÖÏûÑÏù¥ ÏûàÏäµÎãàÎã§.

Í≥µÍµ¨ ÏßÑÌñâÏóê Ï∞®ÏßàÏù¥ ÏóÜÎèÑÎ°ù Ï†ÅÍ∑πÏ†ÅÏù∏ ÌòëÏ°∞
Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§. üòä`,
        timestamp: null,
      };

      setMessages([joinMessage, groupChatNotice, ...fetchedMessages]);
    };

    fetchMessages();
  }, [chatRoomId, isOpen]);

  const getNicknameDisplay = (senderId: string): string => {
    if (senderId === 'system') return '';
    return senderId === currentUserId ? 'ÎÇò' : senderId;
  };

  useEffect(() => {
    if (!isOpen) return;

    // WebSocket Ïó∞Í≤∞
    const handleIncomingMessage = (data: Message) => {
      setMessages((prev) => [...prev, data]);
    };

    webSocketService.connect(() => {
      console.log('Ïó∞Í≤∞ ÏÑ±Í≥µ');
      // webSocketService.subscribe(
      //   `/sub/message/${chatRoomId}`,
      //   (messageOutput) => {
      //     try {
      //       // messageOutputÏù¥ stringÏù¥ÎØÄÎ°ú JSON.parse() ÏàòÌñâ
      //       const parsedMessage = JSON.parse(messageOutput);

      //       // 'body' ÏÜçÏÑ±Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏ ÌõÑ Ï≤òÎ¶¨
      //       if (
      //         parsedMessage &&
      //         typeof parsedMessage === 'object' &&
      //         'body' in parsedMessage
      //       ) {
      //         const data = JSON.parse(parsedMessage.body);
      //         handleIncomingMessage(data);
      //       } else {
      //         console.error('Invalid message format:', parsedMessage);
      //       }
      //     } catch (error) {
      //       console.error('Failed to parse WebSocket message:', error);
      //     }
      //   }
      // );
    });

    return () => {
      webSocketService.unsubscribe(`/sub/message/${chatRoomId}`);
      webSocketService.close();
    };
  }, [chatRoomId, isOpen]);

  useEffect(() => {
    // Ï±ÑÌåÖ Î∞ïÏä§ Ïä§ÌÅ¨Î°§ Í¥ÄÎ¶¨
    if (chatBoxRef.current) {
      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = () => {
    if (!input.trim()) return;

    const message: Message = {
      senderId: isAdmin ? 'system' : currentUserId,
      content: isAdmin ? `[Í¥ÄÎ¶¨Ïûê Î©îÏãúÏßÄ] ${input.trim()}` : input.trim(),
      timestamp: new Date().toISOString(),
    };

    webSocketService.send(
      `/pub/message/${chatRoomId}`,
      JSON.stringify(message)
    );
    setMessages((prev) => [...prev, message]);
    setInput('');
  };

  const formatDate = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      weekday: 'short',
    });
  };

  const addDateSeparators = (messages: Message[]) => {
    const result: Message[] = [];
    let lastDate = '';

    for (const message of messages) {
      const messageDate = message.timestamp
        ? formatDate(message.timestamp)
        : null;
      if (messageDate && messageDate !== lastDate) {
        result.push({
          type: 'date',
          content: messageDate,
          senderId: 'system',
          timestamp: null,
        });
        lastDate = messageDate;
      }
      result.push(message);
    }

    return result;
  };

  const formattedMessages = addDateSeparators(messages);

  if (!isOpen) return null;

  return (
    <ModalOverlay>
      <ModalContainer>
        <ModalHeader>
          <ModalTitle>Ï±ÑÌåÖ</ModalTitle>
          <CloseButton onClick={onClose}>
            <FaTimes />
          </CloseButton>
        </ModalHeader>

        <ChatRoomContainer>
          <ChatMessagesContainer>
            {formattedMessages.map((msg, index) => {
              const isGroupNotice =
                msg.senderId === 'system' &&
                msg.content?.includes('ÏïàÎÇ¥ÏÇ¨Ìï≠: ÌôòÎ∂à Î∞è Ïù¥ÌÉà Í¥ÄÎ†® Ï†ïÏ±Ö');

              if (msg.type === 'date') {
                return (
                  <DateSeparator key={`date-${index}`}>
                    {msg.content}
                  </DateSeparator>
                );
              }

              return (
                <MessageWrapper
                  key={index}
                  $isCurrentUser={msg.senderId === currentUserId}
                  $isSystemMessage={msg.senderId === 'system'}
                >
                  <SenderName>
                    {msg.senderId === 'system'
                      ? ''
                      : getNicknameDisplay(msg.senderId)}
                  </SenderName>
                  <MessageContent
                    $isCurrentUser={msg.senderId === currentUserId}
                    $isGroupNotice={isGroupNotice}
                    $isSystemMessage={msg.senderId === 'system'}
                  >
                    {msg.content}
                  </MessageContent>
                  {msg.timestamp && msg.senderId !== 'system' && (
                    <Timestamp>
                      {new Date(msg.timestamp).toLocaleTimeString()}
                    </Timestamp>
                  )}
                </MessageWrapper>
              );
            })}
            <div ref={chatBoxRef}></div>
          </ChatMessagesContainer>
          <MessageInputContainer>
            <MessageInput
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()} // Enter ÌÇ§ Ï≤òÎ¶¨
            />
            <SendButton onClick={handleSendMessage} disabled={!input.trim()}>
              <FaRegComment />
            </SendButton>
          </MessageInputContainer>
        </ChatRoomContainer>
      </ModalContainer>
    </ModalOverlay>
  );
};

export default ChatRoom;

const ModalOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContainer = styled.div`
  width: 90%;
  max-width: 500px;
  height: 80vh;
  max-height: 700px;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
`;

const ModalHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px;
  background-color: #1e3a8a;
  color: white;
`;

const ModalTitle = styled.h3`
  margin: 0;
  font-size: 1.2rem;
  font-weight: 600;
`;

const CloseButton = styled.button`
  background: transparent;
  border: none;
  color: white;
  font-size: 1.2rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 4px;

  &:hover {
    opacity: 0.8;
  }
`;

const ChatRoomContainer = styled.div`
  display: flex;
  flex-direction: column;
  flex: 1;
  overflow: hidden;
  background-color: #f8fafc;
`;

const ChatMessagesContainer = styled.div`
  flex: 1;
  padding: 16px;
  overflow-y: auto;
  background-color: #f8fafc;
`;

const DateSeparator = styled.div`
  text-align: center;
  margin: 16px 0;
  font-size: 0.85rem;
  color: #64748b;
  font-weight: 500;
  position: relative;

  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    width: 40%;
    height: 1px;
    background-color: #e2e8f0;
  }

  &::before {
    left: 0;
  }

  &::after {
    right: 0;
  }
`;

const MessageWrapper = styled.div<{
  $isCurrentUser: boolean;
  $isSystemMessage?: boolean;
}>`
  display: flex;
  flex-direction: column;
  align-items: ${({ $isCurrentUser, $isSystemMessage }) =>
    $isSystemMessage ? 'center' : $isCurrentUser ? 'flex-end' : 'flex-start'};
  margin-bottom: 12px;
  width: 100%;
`;

const SenderName = styled.div`
  font-size: 0.85rem;
  font-weight: 600;
  color: #4b5563;
  margin-bottom: 4px;
  padding: 0 8px;
`;

const MessageContent = styled.div<{
  $isCurrentUser: boolean;
  $isGroupNotice?: boolean;
  $isSystemMessage?: boolean;
}>`
  max-width: 75%;
  background-color: ${({ $isCurrentUser, $isGroupNotice, $isSystemMessage }) =>
    $isGroupNotice || $isSystemMessage
      ? '#f1f5f9'
      : $isCurrentUser
        ? '#2563eb'
        : '#e2e8f0'};
  color: ${({ $isCurrentUser }) => ($isCurrentUser ? '#ffffff' : '#1e293b')};
  padding: 12px 16px;
  border-radius: 16px;
  border-top-left-radius: ${({ $isCurrentUser }) =>
    $isCurrentUser ? '16px' : '4px'};
  border-top-right-radius: ${({ $isCurrentUser }) =>
    $isCurrentUser ? '4px' : '16px'};
  word-wrap: break-word;
  font-size: 0.95rem;
  line-height: 1.4;
  white-space: pre-wrap; /* Ï§ÑÎ∞îÍøà Ïú†ÏßÄ */
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  text-align: ${({ $isGroupNotice }) => ($isGroupNotice ? 'left' : 'inherit')};
`;

const Timestamp = styled.div`
  font-size: 0.75rem;
  color: #94a3b8;
  margin-top: 4px;
  padding: 0 8px;
`;

const MessageInputContainer = styled.div`
  display: flex;
  padding: 12px 16px;
  border-top: 1px solid #e2e8f0;
  background-color: #fff;
`;

const MessageInput = styled.input`
  flex: 1;
  padding: 12px 16px;
  font-size: 0.95rem;
  border: 1px solid #cbd5e1;
  border-radius: 24px;
  outline: none;
  margin-right: 8px;
  background-color: #f8fafc;
  transition: all 0.2s ease;

  &:focus {
    border-color: #2563eb;
    box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
  }

  &::placeholder {
    color: #94a3b8;
  }
`;

const SendButton = styled.button`
  padding: 12px;
  font-size: 1rem;
  color: #fff;
  background-color: #2563eb;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  width: 42px;
  height: 42px;

  &:hover {
    background-color: #1d4ed8;
  }

  &:disabled {
    background-color: #94a3b8;
    cursor: not-allowed;
  }
`;
