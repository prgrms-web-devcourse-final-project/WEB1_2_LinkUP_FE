import React, { useEffect, useState, useRef } from 'react';
import styled from 'styled-components';
import { FaRegComment } from 'react-icons/fa';
import {
  fetchChatRoomDetails,
  fetchChatMessages,
} from '../pages/community/api/chatApi';
import { webSocketService } from '../../utils/webSocket';

interface Message {
  senderId: string;
  content: string;
  timestamp: string | null;
  chatRoomId?: string;
  type?: 'date';
}

interface Participant {
  userId: string;
  nickname: string;
}

interface ChatRoomProps {
  chatRoomId: string;
  webSocketService: typeof webSocketService;
  isAdmin?: boolean; // Í¥ÄÎ¶¨Ïûê Ïó¨Î∂Ä
}

const ChatRoom: React.FC<ChatRoomProps> = ({
  chatRoomId,
  webSocketService,
  isAdmin = false,
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [participants, setParticipants] = useState<Participant[]>([]);
  const [input, setInput] = useState('');
  const currentUserId = 'user-00001'; // Mock Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê ID
  const chatBoxRef = useRef<HTMLDivElement>(null);
  const [authorId, setAuthorId] = useState<string>('');

  useEffect(() => {
    // Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ Î∞è Ï¥àÍ∏∞ Î©îÏãúÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchRoomDetails = async () => {
      try {
        const { participants, authorNickname } =
          await fetchChatRoomDetails(chatRoomId);
        setParticipants(participants);

        const author = participants.find((p) => p.nickname === authorNickname);
        if (author) setAuthorId(author.userId);

        const participantNicknames = participants.map((p) => p.nickname);

        // ÏûÖÏû• Î©îÏãúÏßÄ Ï∂îÍ∞Ä
        const joinMessage: Message = {
          senderId: 'system',
          content: `'${[...participantNicknames].join(', ')}'ÎãòÍªòÏÑú
Ï±ÑÌåÖÎ∞©Ïóê ÏûÖÏû•ÌïòÏÖ®ÏäµÎãàÎã§.`,
          timestamp: null, // timestamp ÌëúÏãúÌïòÏßÄ ÏïäÏùå
        };

        // Í∑∏Î£π Ï±ÑÌåÖ ÏïàÎÇ¥ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
        const groupChatNotice: Message = {
          senderId: 'system',
          content: `
ÏïàÎÇ¥ÏÇ¨Ìï≠: ÌôòÎ∂à Î∞è Ïù¥ÌÉà Í¥ÄÎ†® Ï†ïÏ±Ö
  1. ÌôòÎ∂à Î∞è ÏàòÎ†π ÏãúÍ∞Ñ/ÏúÑÏπò Ï°∞Ïú®
    - Í≥µÍµ¨ ÏßÑÌñâ Ï§ë(ÏµúÏ¢Ö ÏäπÏù∏ Ïù¥ÌõÑ)Ïù∏ Ï±ÑÌåÖÎ∞©ÏóêÏÑú
    ÏàòÎ†π ÏúÑÏπò Î∞è ÏãúÍ∞ÑÏùÑ Ï°∞Ïú®Ìï©ÎãàÎã§.
    - Ïù¥ÌÉàÏûêÍ∞Ä Î∞úÏÉùÌïòÍ±∞ÎÇò ÌôòÎ∂à ÏöîÏ≤≠Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞,
      Ïù¥ÌÉàÏûêÎäî Ï±ÑÌåÖÎ∞©ÏóêÏÑú ÌôòÎ∂à ÏùòÏÇ¨Î•º Î™ÖÌôïÌûà
      ÌëúÏãúÌï¥Ïïº ÌïòÎ©∞, Î™®Îì† Ï∞∏Ïó¨ Ïù∏ÏõêÏù¥ ÎèôÏùòÌïú
      Í≤ΩÏö∞Ïóê ÌïúÌï¥ ÌôòÎ∂àÏù¥ ÏßÑÌñâÎê©ÎãàÎã§.
  2. ÌôòÎ∂à Î∞è ÎπÑÏö© Î∂ÄÎã¥
    - ÌôòÎ∂à ÏßÑÌñâ Ïãú, Ï†ÑÏ≤¥ ÌôòÎ∂à Ï≤òÎ¶¨ Î∞è Ìï¥Îãπ Ïù∏ÏõêÏóê
      ÎåÄÌïú Ïã†Í≥† Ï†ëÏàòÍ∞Ä Ïù¥Î£®Ïñ¥ÏßÄÎ©∞, Ïù¥Î°ú Ïù∏Ìï¥
      Î∞úÏÉùÌïòÎäî Î™®Îì† ÎπÑÏö©(Í≥µÍµ¨ Î¨ºÌíà Î∞òÏÜ° Îì±)ÏùÄ
      Ïù¥ÌÉàÏûê Î≥∏Ïù∏Ïù¥ Ï†ÑÏï° Î∂ÄÎã¥Ìï©ÎãàÎã§.
  3. Ïù¥ÌÉàÏûêÏóê ÎåÄÌïú ÌéòÎÑêÌã∞ Ï†úÎèÑ
    - Ïù¥ÌÉà ÌñâÏúÑÍ∞Ä Î∞òÎ≥µÎê† Í≤ΩÏö∞, ÏïÑÎûòÏôÄ Í∞ôÏùÄ
      Í≤ΩÍ≥† ÏãúÏä§ÌÖúÏù¥ Ï†ÅÏö©Îê©ÎãàÎã§.
      - 1Ìöå Í≤ΩÍ≥†: Í≥ÑÏ†ï ÏùºÏ£ºÏùº Ï†ïÏßÄ
      - 3Ìöå Í≤ΩÍ≥†: Í≥ÑÏ†ï Ìïú Îã¨ Ï†ïÏßÄ
      - 5Ìöå Í≤ΩÍ≥†: Í≥ÑÏ†ï ÏòÅÍµ¨ Ï†ïÏßÄ

  üí° Ï£ºÏùò: Î≥∏ ÏïàÎÇ¥ÏÇ¨Ìï≠ÏùÑ ÏàôÏßÄÌïòÏßÄ ÏïäÏïÑ Î∞úÏÉùÌïòÎäî
              Î∂àÏù¥ÏùµÏùÄ Î≥∏Ïù∏ÏóêÍ≤å Ï±ÖÏûÑÏù¥ ÏûàÏäµÎãàÎã§.

Í≥µÍµ¨ ÏßÑÌñâÏóê Ï∞®ÏßàÏù¥ ÏóÜÎèÑÎ°ù Ï†ÅÍ∑πÏ†ÅÏù∏ ÌòëÏ°∞
Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§. üòä`,
          timestamp: null,
        };

        const fetchedMessages = await fetchChatMessages(chatRoomId);
        setMessages([joinMessage, groupChatNotice, ...fetchedMessages]);
      } catch (error) {
        console.error('Failed to fetch chat room details or messages:', error);
      }
    };

    fetchRoomDetails();
  }, [chatRoomId]);

  const getNicknameDisplay = (senderId: string): string => {
    if (senderId === 'system') return '';
    const participant = participants.find((p) => p.userId === senderId);
    if (!participant) return senderId;

    if (senderId === authorId) {
      return senderId === currentUserId
        ? 'ÎÇò(Î∞©Ïû•)'
        : `${participant.nickname}(Î∞©Ïû•)`;
    }
    return senderId === currentUserId ? 'ÎÇò' : participant.nickname;
  };

  useEffect(() => {
    // WebSocket Ïó∞Í≤∞
    const handleIncomingMessage = (data: Message) => {
      if (data.chatRoomId === chatRoomId) {
        setMessages((prev) => [...prev, data]);
      }
    };

    webSocketService.connect(
      handleIncomingMessage,
      () => console.log('WebSocket connected'),
      () => console.log('WebSocket disconnected'),
      (error) => console.error('WebSocket error:', error)
    );

    return () => {
      webSocketService.close();
    };
  }, [chatRoomId, webSocketService]);

  useEffect(() => {
    // Ï±ÑÌåÖ Î∞ïÏä§ Ïä§ÌÅ¨Î°§ Í¥ÄÎ¶¨
    if (chatBoxRef.current) {
      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = () => {
    if (!input.trim()) return;

    const message: Message = {
      senderId: isAdmin ? 'system' : currentUserId, // Í¥ÄÎ¶¨ÏûêÎäî ÏãúÏä§ÌÖú Î©îÏãúÏßÄÎ°ú Î≥¥ÎÉÑ
      content: isAdmin ? `[Í¥ÄÎ¶¨Ïûê Î©îÏãúÏßÄ] ${input.trim()}` : input.trim(),
      chatRoomId,
      timestamp: new Date().toISOString(),
    };

    // WebSocketÏúºÎ°ú Î©îÏãúÏßÄ Ï†ÑÏÜ°
    webSocketService.send(`/pub/message/${chatRoomId}`, message);

    // Î©îÏãúÏßÄ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setMessages((prev) => [...prev, message]);
    setInput('');
  };

  const formatDate = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      weekday: 'short',
    });
  };

  const addDateSeparators = (messages: Message[]) => {
    const result: Message[] = [];
    let lastDate = '';

    for (const message of messages) {
      const messageDate = message.timestamp
        ? formatDate(message.timestamp)
        : null;
      if (messageDate && messageDate !== lastDate) {
        result.push({
          type: 'date',
          content: messageDate,
          senderId: 'system',
          timestamp: null,
        });
        lastDate = messageDate;
      }
      result.push(message);
    }

    return result;
  };

  const formattedMessages = addDateSeparators(messages);

  return (
    <ChatRoomContainer>
      <ChatMessagesContainer>
        {formattedMessages.map((msg, index) => {
          const isGroupNotice =
            msg.senderId === 'system' &&
            msg.content?.includes('ÏïàÎÇ¥ÏÇ¨Ìï≠: ÌôòÎ∂à Î∞è Ïù¥ÌÉà Í¥ÄÎ†® Ï†ïÏ±Ö');
          if (msg.type === 'date') {
            return (
              <DateSeparator key={`date-${index}`}>{msg.content}</DateSeparator>
            );
          }
          return (
            <MessageWrapper
              key={index}
              isCurrentUser={msg.senderId === currentUserId}
              isSystemMessage={msg.senderId === 'system'}
            >
              <SenderName>
                {msg.senderId === 'system'
                  ? ''
                  : getNicknameDisplay(msg.senderId)}
              </SenderName>
              <MessageContent
                isCurrentUser={msg.senderId === currentUserId}
                isGroupNotice={isGroupNotice}
                isSystemMessage={msg.senderId === 'system'}
              >
                {msg.content}
              </MessageContent>
              {msg.timestamp && msg.senderId !== 'system' && (
                <Timestamp>
                  {new Date(msg.timestamp).toLocaleTimeString()}
                </Timestamp>
              )}
            </MessageWrapper>
          );
        })}
        <div ref={chatBoxRef}></div>
      </ChatMessagesContainer>
      <MessageInputContainer>
        <MessageInput
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()} // Enter ÌÇ§ Ï≤òÎ¶¨
        />
        <SendButton onClick={handleSendMessage} disabled={!input.trim()}>
          <FaRegComment />
        </SendButton>
      </MessageInputContainer>
    </ChatRoomContainer>
  );
};

export default ChatRoom;

const ChatRoomContainer = styled.div`
  display: flex;
  flex-direction: column;
  height: 100%;
  max-height: 600px;
  border: 1px solid #ccc;
  border-radius: 8px;
  overflow: hidden;
  background-color: #fff;
`;

const ChatMessagesContainer = styled.div`
  flex: 1;
  padding: 16px;
  overflow-y: auto;
  background-color: #f9f9f9;
`;

const DateSeparator = styled.div`
  text-align: center;
  margin: 10px 0;
  font-size: 0.9rem;
  color: #888;
  font-weight: bold;
`;

const MessageWrapper = styled.div<{
  isCurrentUser: boolean;
  isSystemMessage?: boolean;
}>`
  display: flex;
  flex-direction: column;
  align-items: ${({ isCurrentUser, isSystemMessage }) =>
    isSystemMessage ? 'center' : isCurrentUser ? 'flex-end' : 'flex-start'};
  margin-bottom: 12px;
`;

const SenderName = styled.div`
  font-size: 0.9rem;
  font-weight: bold;
  color: #333;
  margin-bottom: 4px;
`;

const MessageContent = styled.div<{
  isCurrentUser: boolean;
  isGroupNotice?: boolean;
  isSystemMessage?: boolean;
}>`
  max-width: 70%;
  background-color: ${({ isCurrentUser, isGroupNotice, isSystemMessage }) =>
    isGroupNotice || isSystemMessage
      ? '#cecece'
      : isCurrentUser
        ? '#d9f9d9'
        : '#e9e9e9'};
  color: #333;
  padding: 10px;
  border-radius: 12px;
  word-wrap: break-word;
  font-size: 1rem;
  white-space: pre-wrap; /* Ï§ÑÎ∞îÍøà Ïú†ÏßÄ */
  text-align: ${({ isGroupNotice }) => (isGroupNotice ? 'left' : 'inherit')};
`;

const Timestamp = styled.div`
  font-size: 0.8rem;
  color: #888;
  margin-top: 4px;
`;

const MessageInputContainer = styled.div`
  display: flex;
  padding: 12px;
  border-top: 1px solid #ccc;
  background-color: #fff;
`;

const MessageInput = styled.input`
  flex: 1;
  padding: 10px;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 8px;
  outline: none;
  margin-right: 8px;
`;

const SendButton = styled.button`
  padding: 10px 16px;
  font-size: 1rem;
  font-weight: bold;
  color: #fff;
  background-color: #4caf50;
  border: none;
  border-radius: 8px;
  cursor: pointer;

  &:hover {
    background-color: #45a049;
  }

  &:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
`;
